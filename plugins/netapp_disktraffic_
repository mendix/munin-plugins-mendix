#!/usr/bin/python
#
# This plugin show the disk traffic
#
# Usage: symlink this plugin like netapp_disktraffic_hostname
#
# The clean function was used from the Perl version
#
# Install:
# - libsnmp-python
# - python-pysnmp2
# - python-pysnmp-common

import netsnmp
import sys
import os
from os.path import basename

host = basename(sys.argv[0]).replace('netapp_disktraffic_','')

if host == '':
    sys.stderr.write("symlink this plugin like netapp_disktraffic_hostname\n")
    exit(1)

community = os.getenv('community')

def clean(hoog, laag):
    tmp_pow2tot32 = 1 << 32
    if hoog < 0:
        hoog = tmp_pow2tot32 + hoog
    if laag < 0:
        laag = tmp_pow2tot32 + laag
        hoog = hoog + 1

    return hoog * tmp_pow2tot32 + laag

argc = len(sys.argv)
if argc > 1 and sys.argv[1] == 'config':
    print "host_name %s" % host
    print "graph_title Disk throughput"
    print "graph_order read write"
    print "graph_args --base 1024"
    print "graph_vlabel Bytes per ${graph_period} read (-) / write (+)"
    print "graph_category disk"
    print "graph_info This graph shows throughput for disks."
    print "read.label Bps"
    print "read.type DERIVE"
    print "read.min 0"
    print "read.graph no"
    print "read.draw LINE1"
    print "write.label Bps"
    print "write.type DERIVE"
    print "write.min 0"
    print "write.draw LINE1"
    print "write.negative read"
    exit(0)
else:
    in_high  = netsnmp.Varbind(".1.3.6.1.4.1.789.1.2.2.15")
    in_low   = netsnmp.Varbind(".1.3.6.1.4.1.789.1.2.2.16")
    out_high = netsnmp.Varbind(".1.3.6.1.4.1.789.1.2.2.17")
    out_low  = netsnmp.Varbind(".1.3.6.1.4.1.789.1.2.2.18")

    res_in_high = netsnmp.snmpwalk(in_high, Version = 1, DestHost = host, Community = community)
    res_in_low = netsnmp.snmpwalk(in_low, Version = 1, DestHost = host, Community = community)
    res_out_high = netsnmp.snmpwalk(out_high, Version = 1, DestHost = host, Community = community)
    res_out_low = netsnmp.snmpwalk(out_low, Version = 1, DestHost = host, Community = community)

    print "read.value %d" % clean(int(res_in_high[0]), int(res_in_low[0]))
    print "write.value %d" % clean(int(res_out_high[0]), int(res_out_low[0]))
    

# vim:ft=python:sw=4:ts=4:expandtab
