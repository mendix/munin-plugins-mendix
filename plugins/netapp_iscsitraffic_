#!/usr/bin/python
#
# This plugin show the iSCSI traffic
#
# Usage: symlink this plugin like netapp_iscsitraffic_hostname
#
# The clean function was used from the Perl version
#
# Install:
# - libsnmp-python
# - python-pysnmp2
# - python-pysnmp-common

import netsnmp
import sys
import os
from os.path import basename

host = basename(sys.argv[0]).replace('netapp_iscsitraffic_','')

if host == '':
    sys.stderr.write("symlink this plugin like netapp_iscsitraffic_hostname\n")
    exit(1)

community = os.getenv('community')

def clean(hoog, laag):
    tmp_pow2tot32 = 1 << 32
    if hoog < 0:
        hoog = tmp_pow2tot32 + hoog
    if laag < 0:
        laag = tmp_pow2tot32 + laag
        hoog = hoog + 1

    return hoog * tmp_pow2tot32 + laag

argc = len(sys.argv)
if argc > 1 and sys.argv[1] == 'config':
    print "host_name %s" % host
    print "graph_title iSCSI throughput"
    print "graph_order in out"
    print "graph_args --base 1024"
    print "graph_vlabel Bytes per ${graph_period} in (-) / out (+)"
    print "graph_category disk"
    print "graph_info This graph shows traffic for iSCSI."
    print "in.type DERIVE"
    print "in.min 0"
    print "in.draw LINE1"
    print "in.graph no"
    print "out.label Bps"
    print "out.type DERIVE"
    print "out.min 0"
    print "out.draw LINE1"
    print "out.negative in"
    exit(0)
else:
    write_high  = netsnmp.Varbind(".1.3.6.1.4.1.789.1.17.10")
    write_low   = netsnmp.Varbind(".1.3.6.1.4.1.789.1.17.9")
    read_high = netsnmp.Varbind(".1.3.6.1.4.1.789.1.17.8")
    read_low  = netsnmp.Varbind(".1.3.6.1.4.1.789.1.17.7")

    res_write_high = netsnmp.snmpwalk(write_high, Version = 1, DestHost = host, Community = community)
    res_write_low = netsnmp.snmpwalk(write_low, Version = 1, DestHost = host, Community = community)
    res_read_high = netsnmp.snmpwalk(read_high, Version = 1, DestHost = host, Community = community)
    res_read_low = netsnmp.snmpwalk(read_low, Version = 1, DestHost = host, Community = community)

    print "out.value %d" % clean(int(res_write_high[0]), int(res_write_low[0]))
    print "in.value %d" % clean(int(res_read_high[0]), int(res_read_low[0]))
    

# vim:ft=python:sw=4:ts=4:expandtab
