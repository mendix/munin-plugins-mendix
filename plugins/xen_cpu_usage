#!/usr/bin/python

import json
import subprocess
import sys

state_file = '/var/lib/munin-node/plugin-state/root/xen_cpu_usage.state'
poll_interval = 300


def xen_info():
    proc = subprocess.Popen(['xen', 'info'], stdout=subprocess.PIPE, stderr=None)
    (stdoutdata, stderrdata) = proc.communicate()
    dom0 = {}
    for line in stdoutdata.splitlines():
        fields = line.split()
        if len(fields) > 2:
            dom0[fields[0]] = fields[2]
        else:
            dom0[fields[0]] = ''
    return dom0


def xen_list():
    proc = subprocess.Popen(['xen', 'list'], stdout=subprocess.PIPE, stderr=None)
    (stdoutdata, stderrdata) = proc.communicate()
    domUs = {}
    for line in stdoutdata.splitlines()[1:]:
        fields = line.split()
        name = fields[0]
        if name.startswith('migrating-'):
            name = name[10:]
        elif name.endswith('--incoming'):
            continue
        domU = {
            'name': name,
            'id': fields[1],
            'memory': fields[2],
            'vcpus': fields[3],
            'state': fields[4],
            'seconds': float(fields[5]),
        }
        domUs[domU['name']] = domU
    return domUs


def get_prev():
    try:
        with open(state_file) as state_fd:
            return json.loads(state_fd.read())
    except:
        return None


def get_domU_cpu_seconds(prev_domU, cur_domU):
    if prev_domU is None and cur_domU['state'] == '------':
        return 0  # special case wheezy live migration incoming domU
    if prev_domU is None:
        return cur_domU['seconds']
    increase = cur_domU['seconds'] - prev_domU['seconds']
    return increase if increase >= 0 else 0


def get_cpu_seconds(prev, cur):
    return sum([get_domU_cpu_seconds(prev.get(name, None), cur.get(name)) for name in cur.keys()])


def write_state_file(cur):
    # yes, if you call it more often than every 300 seconds, you get incorrect results
    with open(state_file, 'w') as state_fd:
        state_fd.write(json.dumps(cur))


def munin_config():
    dom0_info = xen_info()
    upper_limit = int(dom0_info['nr_cpus']) * 100
    print("graph_args --base 1000 -l 0 -u %s --units-exponent 0" % upper_limit)
    print("graph_vlabel %")
    print("graph_title Xen domains CPU Usage")
    print("graph_category xen")
    print("graph_info This graph shows the total amount of cpu used by all xen domains "
          "(incl. dom0)")
    print("cpu.label cpu %")
    print("cpu.draw LINE1")
    print("cpu.type GAUGE")
    print("cpu.min 0")
    print("cpu.line %s:ff0000" % upper_limit)


def munin_values():
    prev = get_prev()
    cur = xen_list()
    if prev is not None:
        cpu_seconds = get_cpu_seconds(prev, cur)
        percentage = (cpu_seconds / poll_interval) * 100
        print("cpu.value %s" % percentage)
    write_state_file(cur)


def main():
    if len(sys.argv) > 1 and sys.argv[1] == "config":
        munin_config()
    else:
        munin_values()

if __name__ == "__main__":
    main()
