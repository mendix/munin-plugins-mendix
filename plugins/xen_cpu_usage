#!/usr/bin/python

import json
import subprocess
import sys

state_file = '/var/lib/munin-node/plugin-state/root/xen_cpu_usage.state'
poll_interval = 300


def get_nr_cpus():
    do_xm_info = subprocess.Popen("""xm info | grep nr_cpus | awk '{ print $NF }'""",
                                  stdout=subprocess.PIPE, stderr=None, shell=True)
    (stdoutdata, stderrdata) = do_xm_info.communicate()
    return int(stdoutdata)


def get_cur():
    do_xm_list = subprocess.Popen("""xm list | tail -n +2 | awk '{ print $1, $6 }'""",
                                  stdout=subprocess.PIPE, stderr=None, shell=True)
    (stdoutdata, stderrdata) = do_xm_list.communicate()
    return dict([x.split() for x in stdoutdata.splitlines()])


def get_prev():
    try:
        with open(state_file) as state_fd:
            return json.loads(state_fd.read())
    except:
        return None


def get_cpu_seconds(prev, cur):
    if prev is None:
        return 0

    cur_domUs = set(cur.keys())
    prev_domUs = set(prev.keys())

    new_domUs = (cur_domUs - prev_domUs)
    both_domUs = (prev_domUs & cur_domUs)

    cpu_seconds = 0
    cpu_seconds += sum([float(cur[domU]) for domU in new_domUs])
    cpu_seconds += sum([float(cur[domU]) - float(prev[domU]) for domU in both_domUs])

    return cpu_seconds


def write_state_file(cur):
    # yes, if you call it more often than every 300 seconds, you get incorrect results
    with open(state_file, 'w') as state_fd:
        state_fd.write(json.dumps(cur))


def munin_config():
    print("graph_args --base 1000 -l 0 -u %s --units-exponent 0" % (get_nr_cpus() * 100))
    print("graph_vlabel %")
    print("graph_title Xen domains CPU Usage")
    print("graph_category xen")
    print("graph_info This graph shows the total amount of cpu used by all xen domains "
          "(incl. dom0)")
    print("cpu.label cpu %")
    print("cpu.draw LINE1")
    print("cpu.type GAUGE")
    print("cpu.min 0")


def munin_values():
    prev = get_prev()
    cur = get_cur()
    cpu_seconds = get_cpu_seconds(prev, cur)
    percentage = (cpu_seconds / poll_interval) * 100
    print("cpu.value %s" % percentage)
    write_state_file(cur)


if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "config":
        munin_config()
    else:
        munin_values()
