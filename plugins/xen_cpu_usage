#!/usr/bin/python

import json
import subprocess
import sys

state_file = '/var/lib/munin-node/plugin-state/root/xen_cpu_usage.state'
poll_interval = 300


def get_nr_cpus():
    do_xen_info = subprocess.Popen("""xen info | grep nr_cpus | awk '{ print $NF }'""",
                                  stdout=subprocess.PIPE, stderr=None, shell=True)
    (stdoutdata, stderrdata) = do_xen_info.communicate()
    return int(stdoutdata)


def get_cur():
    do_xen_list = subprocess.Popen("""xen list | tail -n +2 | awk '{ print $1, $6 }' | """
                                   """sed 's/migrating-//'""",
                                  stdout=subprocess.PIPE, stderr=None, shell=True)
    (stdoutdata, stderrdata) = do_xen_list.communicate()
    cur = {}
    for line in stdoutdata.splitlines():
        name, seconds = line.split()
        cur[name] = float(seconds)
    return cur


def get_prev():
    try:
        with open(state_file) as state_fd:
            return json.loads(state_fd.read())
    except:
        return None


def get_domU_cpu_seconds(prev, cur, domU):
    seconds = cur[domU] - prev.get(domU, 0)
    return seconds if seconds >= 0 else 0


def get_cpu_seconds(prev, cur):
    return sum([get_domU_cpu_seconds(prev, cur, domU) for domU in cur.keys()])


def write_state_file(cur):
    # yes, if you call it more often than every 300 seconds, you get incorrect results
    with open(state_file, 'w') as state_fd:
        state_fd.write(json.dumps(cur))


def munin_config():
    upper_limit = get_nr_cpus() * 100
    print("graph_args --base 1000 -l 0 -u %s --units-exponent 0" % upper_limit)
    print("graph_vlabel %")
    print("graph_title Xen domains CPU Usage")
    print("graph_category xen")
    print("graph_info This graph shows the total amount of cpu used by all xen domains "
          "(incl. dom0)")
    print("cpu.label cpu %")
    print("cpu.draw LINE1")
    print("cpu.type GAUGE")
    print("cpu.min 0")
    print("cpu.line %s:ff0000" % upper_limit)


def munin_values():
    prev = get_prev()
    cur = get_cur()
    if prev is not None:
        cpu_seconds = get_cpu_seconds(prev, cur)
        percentage = (cpu_seconds / poll_interval) * 100
        print("cpu.value %s" % percentage)
    write_state_file(cur)


if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "config":
        munin_config()
    else:
        munin_values()
