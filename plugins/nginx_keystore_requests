#!/usr/bin/python

from __future__ import print_function
import requests
import sys

crt_info = [
    ('cache_hit', 'Cache Hit'),
    ('ldap_hit', 'Keystore Hit'),
    ('ldap_miss', 'Keystore Miss'),
    ('neg_cache_hit', 'Negative Cache Hit'),
    ('not_found', 'Not Found'),
]
ca_info = [
    ('cache_hit', 'Cache Hit'),
    ('neg_cache_hit', 'Negative Cache Hit'),
    ('ldap_hit', 'Keystore Hit'),
    ('ldap_miss', 'Keystore Miss'),
]


def munin_config():
    print('multigraph nginx_keystore_requests_crt')
    print("graph_title TLS Keystore Certificate lookups")
    print("graph_args --base 1000 -l 0")
    print("graph_vlabel hits")
    print("graph_category nginx")
    print("graph_info This graph shows the number of TLS Keystore Hits/Misses "
          "and (Negative) Cached Certificates Hits")
    for k, v in crt_info:
        print("{}.label {}".format(k, v))
        print("{}.draw LINE1".format(k))
        print("{}.info {}".format(k, v))
        print("{}.type DERIVE".format(k))
        print("{}.min 0".format(k))
    print("")

    print('multigraph nginx_keystore_requests_ca')
    print("graph_title TLS Keystore CA lookups")
    print("graph_args --base 1000 -l 0")
    print("graph_vlabel hits")
    print("graph_category nginx")
    print("graph_info This graph shows the number of TLS Keystore Hits/Misses "
          "and (Negative) Cached CA Hits")
    for k, v in ca_info:
        print("{}.label {}".format(k, v))
        print("{}.draw LINE1".format(k))
        print("{}.info {}".format(k, v))
        print("{}.type DERIVE".format(k))
        print("{}.min 0".format(k))
    print("")


def munin_values():
    stats = requests.get('http://localhost:83/keystore/stats').json()
    print('multigraph nginx_keystore_requests_crt')
    for k, _ in crt_info:
        print("{0}.value {1}".format(k, stats['crt'][k]))
    print("")
    print('multigraph nginx_keystore_requests_ca')
    for k, _ in ca_info:
        print("{0}.value {1}".format(k, stats['ca'][k]))


def main():
    if len(sys.argv) > 1 and sys.argv[1] == "config":
        munin_config()
    else:
        munin_values()


if __name__ == "__main__":
    main()
